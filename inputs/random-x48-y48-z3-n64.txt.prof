Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 50.01      0.01     0.01   189262     0.05     0.05  maze_read
 50.01      0.02     0.01     3059     3.27     6.50  _fini
  0.00      0.02     0.00    23653     0.00     0.00  list_remove
  0.00      0.02     0.00      151     0.00     0.00  vector_sort
  0.00      0.02     0.00      134     0.00     0.00  vector_pushBack
  0.00      0.02     0.00       17     0.00     0.00  maze_checkPaths
  0.00      0.02     0.00        3     0.00   336.18  traceToNeighbor

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2017 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 49.99% of 0.02 seconds

index % time    self  children    called     name
[1]     99.4    0.01    0.01    2659+417     <cycle 1 as a whole> [1]
                0.01    0.01    3059+47535       _fini <cycle 1> [2]
                0.00    0.00      17             maze_checkPaths <cycle 1> [19]
-----------------------------------------------
                               47535             _fini <cycle 1> [2]
                                 405             maze_checkPaths <cycle 1> [19]
                0.00    0.00       1/2659        router_free [14]
                0.00    0.00       1/2659        pair_alloc [13]
                0.00    0.00       3/2659        expandToNeighbor [12]
                0.00    0.00      17/2659        pair_swap [11]
                0.00    0.00      24/2659        queue_free [10]
                0.00    0.00      24/2659        queue_clear [9]
                0.00    0.00      32/2659        queue_alloc [8]
                0.00    0.00     132/2659        router_alloc [7]
                0.00    0.00     134/2659        traceToNeighbor [6]
                0.00    0.00     908/2659        router_solve [5]
                0.01    0.01    1378/2659        queue_push [3]
[2]     99.4    0.01    0.01    3059+47535   _fini <cycle 1> [2]
                0.01    0.00  186851/189262      maze_read [4]
                0.00    0.00      14/134         vector_pushBack [18]
                0.00    0.00      14/151         vector_sort [17]
                                  12             maze_checkPaths <cycle 1> [19]
                               47535             _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[3]     52.1    0.00    0.01                 queue_push [3]
                0.01    0.01    1378/2659        _fini <cycle 1> [2]
                0.00    0.00    2080/189262      maze_read [4]
                0.00    0.00       1/2659        maze_checkPaths <cycle 1> [19]
-----------------------------------------------
                0.00    0.00       1/189262      expandToNeighbor [12]
                0.00    0.00      24/189262      queue_free [10]
                0.00    0.00      24/189262      queue_isEmpty [15]
                0.00    0.00      24/189262      queue_clear [9]
                0.00    0.00      64/189262      pair_alloc [13]
                0.00    0.00      66/189262      router_solve [5]
                0.00    0.00     128/189262      traceToNeighbor [6]
                0.00    0.00    2080/189262      queue_push [3]
                0.01    0.00  186851/189262      _fini <cycle 1> [2]
[4]     50.0    0.01    0.00  189262         maze_read [4]
                0.00    0.00   23653/23653       list_remove [16]
-----------------------------------------------
                                                 <spontaneous>
[5]     39.1    0.00    0.01                 router_solve [5]
                0.00    0.00     908/2659        _fini <cycle 1> [2]
                0.00    0.00       3/3           traceToNeighbor [6]
                0.00    0.00       4/2659        maze_checkPaths <cycle 1> [19]
                0.00    0.00      66/189262      maze_read [4]
-----------------------------------------------
                0.00    0.00       3/3           router_solve [5]
[6]      5.0    0.00    0.00       3         traceToNeighbor [6]
                0.00    0.00     134/2659        _fini <cycle 1> [2]
                0.00    0.00     128/189262      maze_read [4]
-----------------------------------------------
                                                 <spontaneous>
[7]      4.9    0.00    0.00                 router_alloc [7]
                0.00    0.00     132/2659        _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[8]      1.2    0.00    0.00                 queue_alloc [8]
                0.00    0.00      32/2659        _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[9]      0.9    0.00    0.00                 queue_clear [9]
                0.00    0.00      24/2659        _fini <cycle 1> [2]
                0.00    0.00      24/189262      maze_read [4]
-----------------------------------------------
                                                 <spontaneous>
[10]     0.9    0.00    0.00                 queue_free [10]
                0.00    0.00      24/2659        _fini <cycle 1> [2]
                0.00    0.00      24/189262      maze_read [4]
-----------------------------------------------
                                                 <spontaneous>
[11]     0.6    0.00    0.00                 pair_swap [11]
                0.00    0.00      17/2659        _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[12]     0.1    0.00    0.00                 expandToNeighbor [12]
                0.00    0.00       3/2659        _fini <cycle 1> [2]
                0.00    0.00       1/189262      maze_read [4]
-----------------------------------------------
                                                 <spontaneous>
[13]     0.1    0.00    0.00                 pair_alloc [13]
                0.00    0.00       1/2659        _fini <cycle 1> [2]
                0.00    0.00      64/189262      maze_read [4]
-----------------------------------------------
                                                 <spontaneous>
[14]     0.0    0.00    0.00                 router_free [14]
                0.00    0.00       1/2659        _fini <cycle 1> [2]
-----------------------------------------------
                                                 <spontaneous>
[15]     0.0    0.00    0.00                 queue_isEmpty [15]
                0.00    0.00      24/189262      maze_read [4]
-----------------------------------------------
                0.00    0.00   23653/23653       maze_read [4]
[16]     0.0    0.00    0.00   23653         list_remove [16]
-----------------------------------------------
                0.00    0.00      14/151         _fini <cycle 1> [2]
                0.00    0.00     137/151         maze_checkPaths <cycle 1> [19]
[17]     0.0    0.00    0.00     151         vector_sort [17]
-----------------------------------------------
                0.00    0.00      14/134         _fini <cycle 1> [2]
                0.00    0.00     120/134         maze_checkPaths <cycle 1> [19]
[18]     0.0    0.00    0.00     134         vector_pushBack [18]
-----------------------------------------------
                                  12             _fini <cycle 1> [2]
                0.00    0.00       1/2659        queue_push [3]
                0.00    0.00       4/2659        router_solve [5]
[19]     0.0    0.00    0.00      17         maze_checkPaths <cycle 1> [19]
                0.00    0.00     137/151         vector_sort [17]
                0.00    0.00     120/134         vector_pushBack [18]
                                 405             _fini <cycle 1> [2]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2017 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [2] _fini                   [4] maze_read              [17] vector_sort
  [16] list_remove             [6] traceToNeighbor (router.c) [1] <cycle 1>
  [19] maze_checkPaths        [18] vector_pushBack
_fini
maze_read
list_remove
vector_pushBack
maze_checkPaths
vector_sort
traceToNeighbor
_init
main
_start
_dl_relocate_static_pie
deregister_tm_clones
register_tm_clones
__do_global_dtors_aux
frame_dummy
open_out_stream
grid_alloc
grid_free
grid_copy
grid_isPointValid
grid_getPointRef
grid_getPointIndices
grid_getPoint
grid_isPointEmpty
grid_isPointFull
grid_setPoint
grid_addPath
grid_addPath_Ptr
grid_print_to_file
grid_print
maze_alloc
maze_free
coordinate_alloc
coordinate_free
coordinate_isEqual
coordinate_comparePair
coordinate_areAdjacent
expandToNeighbor
router_alloc
router_free
router_solve
pair_alloc
pair_free
pair_swap
queue_alloc
queue_free
queue_isEmpty
queue_clear
queue_push
queue_pop
compareDataPtrAddresses
list_iter_reset
list_iter_hasNext
list_iter_next
list_alloc
list_free
list_isEmpty
list_getSize
list_find
list_insert
list_clear
vector_alloc
vector_free
vector_at
vector_popBack
vector_getSize
vector_clear
vector_copy
__libc_csu_init
__libc_csu_fini
__frame_dummy_init_array_entry
__do_global_dtors_aux_fini_array_entry
data_start
